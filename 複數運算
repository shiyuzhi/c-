#include<iostream>        
#include<vector>        
using namespace std;      
      
class Complex {      
public:      
    Complex(double r = 0, double i = 0) { real = r; image = i; }      
    Complex operator+(Complex a)      
    {      
        return Complex(real + a.real, image + a.image);      
    }      
    Complex operator-(Complex a)      
    {      
        return Complex(real - a.real, image - a.image);      
    }      
    Complex operator*(Complex a)      
    {      
        return Complex(real * a.real - image * a.image, (real * a.image + a.real * image));      
    }      
      
      
    void print()      
    {      
        cout << real << '+' << image << "i" << endl;      
    }      
private:      
    double real;      
    double image;      
};      
      
int main()      
{      
    Complex r1, r2, r3;      
    vector <Complex> r;      
    char op; int R1, I1, R2, I2;      
    while (cin >> op >> R1 >> I1 >> R2 >> I2)      
    {      
        r1 = Complex(R1, I1);      
        r2 = Complex(R2, I2);      
        switch (op)      
        {      
        case'+':      
            r3 = r1 + r2;      
            break;      
        case'-':      
            r3 = r1 - r2;      
            break;      
        case'*':      
            r3 = r1 * r2;      
            break;      
        }      
        r.push_back(r3);      
    }      
    for (int i = 0; i < r.size(); i++) r[i].print();      
    return 0;      
}  
